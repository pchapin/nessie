<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.docbook.org/xml/4.5/docbookx.dtd">
  
<chapter id="Build">
  <title>Building Nessie</title>

  <para>This chapter describes how to build Nessie and its associated documentation. We also
    describe various issues related to the tool chain in general, such as setting up a
    continuous integration server and the use of style tools and advanced static analysis tools.
    This chapter is intended for Nessie contributors or for power users who wish to build the
    system from the source code repository. If you are using a binary distribution you can skip
    this section entirely.</para>

  <para>The tools with specific version numbers shown below are the official tools used by the
    Nessie contributors. Other tools (or other versions of the same tools) may also work.
    Obviously the greater the differences between the tools you attempt to use and those listed
    below the more problems you are likely to encounter.</para>

  <para>Nessie uses a number of libraries. Some of the these libraries are included in the
    Nessie repository. You do not need to download and install them yourself. The section only
    contains tools and libraries that you need to set up manually. Be aware, however, that the
    libraries included in the Nessie repository do not include their documentation. You may wish
    to download that documentation from each library vendor's web site.</para>

  <variablelist>
    <title>Build Tools</title>

    <varlistentry>
      <term><ulink url="http://www.oracle.com/technetwork/java/javase/downloads/index.html">Java
          Development Kit</ulink></term>
      <listitem>
        <para>We use JDK v1.8.0_11 but any 1.8 version would probably work. A full JDK is
          necessary, and not just a JRE, because the Augusta code base includes some Java
          files.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><ulink url="http://www.jetbrains.com/idea/">IntelliJ IDEA</ulink></term>
      <listitem>
        <para>We use IntelliJ IDEA, Community Edition, v13.1.4 with the IntelliJ Scala plugin
          developed by JetBrains as our integrated development environment. The plugin can be
          installed from inside IntelliJ once the main IDE is installed.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><ulink url="http://www.scala-lang.org/">Scala Compiler</ulink></term>
      <listitem>
        <para>We use Scala v2.11.2. The Scala compiler is executed indirectly via IntelliJ.
          Currently no official method of building Daja outside the IDE is provided.
            <emphasis>TODO: A method to build Nessie using ant, maven, or SBT would be
            useful.</emphasis></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><ulink url="http://www.antlr.org">ANTLR</ulink></term>
      <listitem>
        <para>ANTLR is a parser generator. Nessie currently uses ANTLR v3.4.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><ulink url="http://www.docbook.org/">DocBook</ulink></term>
      <listitem>
        <para>The documentation is written primarily in DocBook. This is an XML format and so is
          readable (and writable) in an ordinary text editor. However, if you want to build
          nicely formatted documentation or benefit from a more advanced editing features, you
          will need a tool chain for processing DocBook documents. Several such tool chains
          exist. DocBook is supported in IntelliJ but we currently use <ulink
            url="http://oxygenxml.com/">&lt;oXygen/&gt;</ulink> as our primary DocBook editing
          and formatting tool. Emacs's nXML mode is also useful. <emphasis>TODO: Describe a
            DocBook tool chain in more detail or how to set up IntelliJ for DocBook
            editing.</emphasis></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><ulink url="http://jenkins-ci.org/">Jenkins</ulink></term>
      <listitem>
        <para>We use Jenkins as our continuous integration system. Our practice is to run
          Jenkins from the <ulink url="http://glassfish.java.net/">Glassfish</ulink> application
          server. <emphasis>TODO: Give more details about setting up Glassfish and
            Jenkins.</emphasis></para>
      </listitem>
    </varlistentry>

  </variablelist>

  <para>To build Nessie, first install the Nessie software listed above and libraries mentioned
    in the <literal>lib</literal> folder's README file. You will have to set up your JDK in
    IntelliJ and define two "external libraries" for Scala. The Nessie project files assume
    these libraries are named "scala-compiler-2.11" and "scala-library-2.11."</para>

  <para>You can then use IntelliJ's integrated Git support to check out the Nessie project from
      <ulink url="https://github.com/pchapin/nessie.git"/>. Before you can build the project you
    need to manually generate the Nessie parser. Do this by running
      <filename>bin/build-nessie-parser.{sh,bat}</filename> from the root folder of the project.
    In the future this step will not be necessary. Once you have the project loaded into
    IntelliJ you can build the full project.</para>

  <para><emphasis>TODO: Say something about testing!</emphasis></para>

</chapter>
